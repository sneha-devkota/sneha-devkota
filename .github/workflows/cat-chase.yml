name: Generate cat chase mouse animation
on:
  schedule: # execute every 12 hours
    - cron: "0 */12 * * *"
  workflow_dispatch:
  push:
    branches:
    - master
    - main
jobs:
  generate:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate cat chase mouse animation
        run: |
          mkdir -p dist
          echo "Creating animation script..."
          cat > generate-cat-chase.py << 'EOF'
          import math
          import random
          import os
          
          print("Starting cat chase animation generation...")
          
          # GitHub contribution graph dimensions
          WEEKS = 53
          DAYS = 7
          CELL_SIZE = 11
          CELL_GAP = 3
          MARGIN = 20
          
          # Animation settings
          FRAMES = 60
          DURATION = 8  # seconds
          
          # Colors
          COLORS = {
              'background': '#0d1117',
              'empty': '#161b22', 
              'cat': '#f85149',
              'mouse': '#58a6ff',
              'pounce': '#ffa657',
              'trail': '#39d353'
          }
          
          class CatChaseAnimation:
              def __init__(self):
                  self.mouse_positions = []
                  self.cat_positions = []
                  self.pounce_frames = []
                  self.trail_positions = []
                  self.generate_path()
              
              def generate_path(self):
                  print("Generating animation paths...")
                  # Generate mouse path (random walk)
                  mouse_x, mouse_y = 5, 3
                  cat_x, cat_y = WEEKS - 5, DAYS - 3
                  
                  for frame in range(FRAMES):
                      # Mouse movement (random walk with boundaries)
                      if random.random() < 0.4:  # Change direction
                          dx = random.choice([-1, 0, 1])
                          dy = random.choice([-1, 0, 1])
                          mouse_x = max(0, min(WEEKS - 1, mouse_x + dx))
                          mouse_y = max(0, min(DAYS - 1, mouse_y + dy))
                      
                      self.mouse_positions.append((mouse_x, mouse_y))
                      
                      # Cat chases mouse with slight delay
                      if frame > 5:  # Cat starts chasing after delay
                          target_x, target_y = self.mouse_positions[frame - 3]  # Chase previous mouse position
                          dx = target_x - cat_x
                          dy = target_y - cat_y
                          distance = math.sqrt(dx**2 + dy**2)
                          
                          if distance > 0:
                              # Move cat towards mouse
                              speed = 0.8
                              cat_x += dx / distance * speed
                              cat_y += dy / distance * speed
                              cat_x = max(0, min(WEEKS - 1, cat_x))
                              cat_y = max(0, min(DAYS - 1, cat_y))
                              
                              # Pounce when close
                              if distance < 2 and random.random() < 0.3:
                                  self.pounce_frames.append(frame)
                      
                      self.cat_positions.append((int(cat_x), int(cat_y)))
                      
                      # Add to trail
                      self.trail_positions.append(list(self.cat_positions[-10:]))  # Keep last 10 positions
                  
                  print(f"Generated {len(self.mouse_positions)} mouse positions and {len(self.cat_positions)} cat positions")
              
              def generate_svg(self):
                  print("Generating SVG content...")
                  width = WEEKS * (CELL_SIZE + CELL_GAP) + MARGIN * 2
                  height = DAYS * (CELL_SIZE + CELL_GAP) + MARGIN * 2
                  
                  svg_content = f'''<svg width="{width}" height="{height}" viewBox="0 0 {width} {height}" xmlns="http://www.w3.org/2000/svg">
              <style>
                  .mouse {{ 
                      animation: mouseMove {DURATION}s infinite ease-in-out;
                      transform-origin: center;
                  }}
                  .cat {{ 
                      animation: catChase {DURATION}s infinite ease-in-out;
                      transform-origin: center;
                  }}
                  .pounce {{
                      animation: pounce 0.3s ease-in-out;
                  }}
                  .trail {{
                      animation: trail {DURATION}s infinite ease-in-out;
                      opacity: 0.6;
                  }}
                  
                  @keyframes mouseMove {{'''
                  
                  # Generate mouse keyframes
                  for i, (x, y) in enumerate(self.mouse_positions[::3]):  # Every 3rd frame
                      percent = i * 100 / (len(self.mouse_positions[::3]) - 1)
                      px = MARGIN + x * (CELL_SIZE + CELL_GAP)
                      py = MARGIN + y * (CELL_SIZE + CELL_GAP)
                      svg_content += f'''
                          {percent:.1f}% {{ transform: translate({px}px, {py}px); }}'''
                  
                  svg_content += '''
                  }
                  
                  @keyframes catChase {'''
                  
                  # Generate cat keyframes
                  for i, (x, y) in enumerate(self.cat_positions[::3]):
                      percent = i * 100 / (len(self.cat_positions[::3]) - 1)
                      px = MARGIN + x * (CELL_SIZE + CELL_GAP)
                      py = MARGIN + y * (CELL_SIZE + CELL_GAP)
                      svg_content += f'''
                          {percent:.1f}% {{ transform: translate({px}px, {py}px); }}'''
                  
                  svg_content += '''
                  }
                  
                  @keyframes pounce {
                      0%, 100% { transform: scale(1); }
                      50% { transform: scale(1.3); }
                  }
                  
                  @keyframes trail {
                      0%, 100% { opacity: 0.3; }
                      50% { opacity: 0.7; }
                  }
              </style>
              
              <!-- Background -->
              <rect width="100%" height="100%" fill="''' + COLORS['background'] + '''"/>
              
              <!-- Grid -->'''
                  
                  # Draw grid background
                  for week in range(WEEKS):
                      for day in range(DAYS):
                          x = MARGIN + week * (CELL_SIZE + CELL_GAP)
                          y = MARGIN + day * (CELL_SIZE + CELL_GAP)
                          svg_content += f'''
              <rect x="{x}" y="{y}" width="{CELL_SIZE}" height="{CELL_SIZE}" 
                    fill="{COLORS['empty']}" rx="2"/>'''
                  
                  # Add trail effect
                  svg_content += f'''
              
              <!-- Trail -->
              <g class="trail">'''
                  
                  for i, (x, y) in enumerate(self.cat_positions[::4]):  # Sparse trail
                      if i > 0:  # Skip first position
                          px = MARGIN + x * (CELL_SIZE + CELL_GAP)
                          py = MARGIN + y * (CELL_SIZE + CELL_GAP)
                          opacity = 0.3 + (i / len(self.cat_positions[::4])) * 0.4
                          delay = i * 0.1
                          svg_content += f'''
                  <rect x="{px}" y="{py}" width="{CELL_SIZE}" height="{CELL_SIZE}" 
                        fill="{COLORS['trail']}" rx="2" opacity="{opacity:.2f}"
                        style="animation-delay: -{delay}s"/>'''
                  
                  svg_content += '''
              </g>
              
              <!-- Mouse -->
              <g class="mouse">
                  <rect width="''' + str(CELL_SIZE) + '''" height="''' + str(CELL_SIZE) + '''" 
                        fill="''' + COLORS['mouse'] + '''" rx="3"/>
                  <text x="''' + str(CELL_SIZE//2) + '''" y="8" text-anchor="middle" 
                        font-size="8" fill="white">üê≠</text>
              </g>
              
              <!-- Cat -->
              <g class="cat">
                  <rect width="''' + str(CELL_SIZE) + '''" height="''' + str(CELL_SIZE) + '''" 
                        fill="''' + COLORS['cat'] + '''" rx="3"/>
                  <text x="''' + str(CELL_SIZE//2) + '''" y="8" text-anchor="middle" 
                        font-size="8" fill="white">üê±</text>
              </g>
              
          </svg>'''
                  
                  return svg_content
          
          # Generate the animation
          print("Creating animation instance...")
          animation = CatChaseAnimation()
          svg_content = animation.generate_svg()
          
          # Write to file
          print("Writing SVG to file...")
          os.makedirs('dist', exist_ok=True)
          with open('dist/cat-chase.svg', 'w') as f:
              f.write(svg_content)
          
          # Verify file was created
          if os.path.exists('dist/cat-chase.svg'):
              file_size = os.path.getsize('dist/cat-chase.svg')
              print(f"‚úÖ cat-chase.svg created successfully! Size: {file_size} bytes")
          else:
              print("‚ùå Failed to create cat-chase.svg")
              exit(1)
          
          print("Cat chase animation generated successfully!")
          EOF
          
          echo "Running Python script..."
          python3 generate-cat-chase.py
          
          echo "Checking if files were created..."
          ls -la dist/
          
          echo "Checking file content..."
          head -10 dist/cat-chase.svg
          
      - name: Generate simple static version as fallback
        run: |
          mkdir -p dist
          cat > dist/cat-chase.svg << 'EOF'
          <svg width="722" height="112" xmlns="http://www.w3.org/2000/svg">
            <style>
              .mouse { fill: #58a6ff; animation: mouseMove 3s infinite; }
              .cat { fill: #f85149; animation: catChase 3s infinite 0.5s; }
              .pounce { fill: #ffa657; animation: pounce 0.5s infinite 2s; }
              @keyframes mouseMove {
                0%, 100% { transform: translate(0, 0); }
                25% { transform: translate(100px, -20px); }
                50% { transform: translate(200px, 20px); }
                75% { transform: translate(150px, -10px); }
              }
              @keyframes catChase {
                0% { transform: translate(0, 0); }
                25% { transform: translate(80px, -15px); }
                50% { transform: translate(180px, 15px); }
                75% { transform: translate(130px, -5px); }
                100% { transform: translate(20px, 5px); }
              }
              @keyframes pounce {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.5); }
              }
            </style>
            <rect width="100%" height="100%" fill="#0d1117"/>
            <!-- Grid background -->
            <defs>
              <pattern id="grid" width="14" height="14" patternUnits="userSpaceOnUse">
                <rect width="11" height="11" fill="#161b22"/>
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#grid)"/>
            
            <!-- Mouse -->
            <circle cx="50" cy="50" r="5" class="mouse"/>
            <text x="45" y="35" fill="#58a6ff" font-size="12">üê≠</text>
            
            <!-- Cat -->
            <circle cx="20" cy="60" r="6" class="cat pounce"/>
            <text x="14" y="45" fill="#f85149" font-size="14">üê±</text>
            
            <!-- Title -->
            <text x="300" y="30" fill="#f0f6fc" font-family="monospace" font-size="16">Cat Chase Mouse Animation</text>
            <text x="300" y="50" fill="#8b949e" font-family="monospace" font-size="12">A playful cat chases a mouse across your GitHub graph</text>
          </svg>
          EOF
          
      - name: Push animation to output branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Save the generated files
          echo "Backing up generated files..."
          mkdir -p /tmp/output-files
          cp dist/* /tmp/output-files/ 2>/dev/null || echo "No files to backup"
          ls -la /tmp/output-files/
          
          # Remove conflicting files explicitly
          echo "Removing conflicting files..."
          rm -f dist/cat-chase.svg
          rm -f generate-cat-chase.py
          rm -rf dist/
          
          # Check if output branch exists
          if git ls-remote --heads origin output | grep output; then
            echo "Output branch exists, checking it out..."
            git fetch origin output
            git checkout output
          else
            echo "Creating new output branch..."
            git checkout --orphan output
            git rm -rf . || true
          fi
          
          # Copy files back and commit
          cp /tmp/output-files/* . 2>/dev/null || echo "No files to copy"
          ls -la
          git add .
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update cat chase mouse animation"
            git push origin output
          fi
          
      - name: Create README for output branch
        run: |
          cat > dist/README.md << 'EOF'
          # Cat Chase Mouse Animation üê±üê≠
          
          This branch contains an animated SVG showing a cat chasing a mouse across your GitHub contribution graph!
          
